// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repository/coin_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/db/repository/coin_repository.go -destination=internal/mocks/repository/coin_repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/Ki4EH/stunning-octo-waddle/internal/db/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCoinRepository is a mock of CoinRepository interface.
type MockCoinRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoinRepositoryMockRecorder
	isgomock struct{}
}

// MockCoinRepositoryMockRecorder is the mock recorder for MockCoinRepository.
type MockCoinRepositoryMockRecorder struct {
	mock *MockCoinRepository
}

// NewMockCoinRepository creates a new mock instance.
func NewMockCoinRepository(ctrl *gomock.Controller) *MockCoinRepository {
	mock := &MockCoinRepository{ctrl: ctrl}
	mock.recorder = &MockCoinRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinRepository) EXPECT() *MockCoinRepositoryMockRecorder {
	return m.recorder
}

// BuyItemFromShop mocks base method.
func (m *MockCoinRepository) BuyItemFromShop(ctx context.Context, userID uuid.UUID, itemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItemFromShop", ctx, userID, itemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItemFromShop indicates an expected call of BuyItemFromShop.
func (mr *MockCoinRepositoryMockRecorder) BuyItemFromShop(ctx, userID, itemName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItemFromShop", reflect.TypeOf((*MockCoinRepository)(nil).BuyItemFromShop), ctx, userID, itemName)
}

// GetReceiveTransaction mocks base method.
func (m *MockCoinRepository) GetReceiveTransaction(ctx context.Context, userID uuid.UUID, transactions *[]models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiveTransaction", ctx, userID, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetReceiveTransaction indicates an expected call of GetReceiveTransaction.
func (mr *MockCoinRepositoryMockRecorder) GetReceiveTransaction(ctx, userID, transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiveTransaction", reflect.TypeOf((*MockCoinRepository)(nil).GetReceiveTransaction), ctx, userID, transactions)
}

// GetSentTransaction mocks base method.
func (m *MockCoinRepository) GetSentTransaction(ctx context.Context, userID uuid.UUID, transactions *[]models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentTransaction", ctx, userID, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSentTransaction indicates an expected call of GetSentTransaction.
func (mr *MockCoinRepositoryMockRecorder) GetSentTransaction(ctx, userID, transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentTransaction", reflect.TypeOf((*MockCoinRepository)(nil).GetSentTransaction), ctx, userID, transactions)
}

// GetTransactions mocks base method.
func (m *MockCoinRepository) GetTransactions(ctx context.Context, userID uuid.UUID, transactions *[]models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, userID, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockCoinRepositoryMockRecorder) GetTransactions(ctx, userID, transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockCoinRepository)(nil).GetTransactions), ctx, userID, transactions)
}

// SendCoins mocks base method.
func (m *MockCoinRepository) SendCoins(ctx context.Context, fromUserID, toUserID uuid.UUID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, fromUserID, toUserID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockCoinRepositoryMockRecorder) SendCoins(ctx, fromUserID, toUserID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockCoinRepository)(nil).SendCoins), ctx, fromUserID, toUserID, amount)
}
