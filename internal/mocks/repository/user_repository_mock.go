// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/db/repository/user_repository.go -destination=internal/mocks/repository/user_repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	models "github.com/Ki4EH/stunning-octo-waddle/internal/db/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUserCredential mocks base method.
func (m *MockUserRepository) CreateUserCredential(ctx context.Context, credential *models.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCredential", ctx, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserCredential indicates an expected call of CreateUserCredential.
func (mr *MockUserRepositoryMockRecorder) CreateUserCredential(ctx, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCredential", reflect.TypeOf((*MockUserRepository)(nil).CreateUserCredential), ctx, credential)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id uuid.UUID) (*models.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// GetUserCredentialByName mocks base method.
func (m *MockUserRepository) GetUserCredentialByName(ctx context.Context, name string) (*models.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentialByName", ctx, name)
	ret0, _ := ret[0].(*models.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredentialByName indicates an expected call of GetUserCredentialByName.
func (mr *MockUserRepositoryMockRecorder) GetUserCredentialByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentialByName", reflect.TypeOf((*MockUserRepository)(nil).GetUserCredentialByName), ctx, name)
}

// GetUserItems mocks base method.
func (m *MockUserRepository) GetUserItems(ctx context.Context, id uuid.UUID, userItems *[]models.UserItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserItems", ctx, id, userItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserItems indicates an expected call of GetUserItems.
func (mr *MockUserRepositoryMockRecorder) GetUserItems(ctx, id, userItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserItems", reflect.TypeOf((*MockUserRepository)(nil).GetUserItems), ctx, id, userItems)
}

// GetUsernamesByIDs mocks base method.
func (m *MockUserRepository) GetUsernamesByIDs(ctx context.Context, userIDs []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernamesByIDs", ctx, userIDs)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernamesByIDs indicates an expected call of GetUsernamesByIDs.
func (mr *MockUserRepositoryMockRecorder) GetUsernamesByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernamesByIDs", reflect.TypeOf((*MockUserRepository)(nil).GetUsernamesByIDs), ctx, userIDs)
}
